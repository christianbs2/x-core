{
    "version": 3,
    "sources": ["components/inventoryItem.jsx", "components/inventorySlot.jsx", "components/inventoryBox.jsx", "components/notification.jsx", "components/inventory.jsx", "App.js", "serviceWorker.js", "index.js"],
    "names": [
        "InventoryItem",
        "props",
        "onItemLeave",
        "onItemHover",
        "onItemClick",
        "el",
        "rect",
        "getBoundingClientRect",
        "left",
        "window",
        "scrollX",
        "top",
        "scrollY",
        "getOffset",
        "element",
        "current",
        "item",
        "handleHiddenItemClick",
        "setState",
        "loading",
        "setTimeout",
        "onLoadingComplete",
        "React",
        "createRef",
        "state",
        "label",
        "focus",
        "this",
        "$",
        "draggable",
        "revert",
        "revertDuration",
        "scroll",
        "helper",
        "appendTo",
        "start",
        "event",
        "ui",
        "classList",
        "hide",
        "siblings",
        "textContent",
        "startedDragging",
        "dragging",
        "stop",
        "show",
        "html",
        "stoppedDragging",
        "Logo",
        "Name",
        "Count",
        "Weight",
        "Durability",
        "Hidden",
        "className",
        "onClick",
        "ref",
        "data-props",
        "JSON",
        "stringify",
        "onMouseLeave",
        "onMouseEnter",
        "undefined",
        "Math",
        "round",
        "style",
        "width",
        "Component",
        "InventorySlot",
        "getLabelLength",
        "String",
        "prototype",
        "trunc",
        "n",
        "length",
        "substr",
        "transformData",
        "Label",
        "determineItem",
        "offset",
        "action",
        "isActive",
        "droppable",
        "accept",
        "drop",
        "children",
        "target",
        "parse",
        "getAttribute",
        "onDrop",
        "data",
        "onSwitch",
        "over",
        "scrollIntoView",
        "behavior",
        "block",
        "hover",
        "slotInformation",
        "slot",
        "active",
        "InventoryBox",
        "check",
        "renderTabs",
        "output",
        "container",
        "forEach",
        "i",
        "selected",
        "activeContainers",
        "push",
        "onChangeTab",
        "key",
        "actionLabel",
        "maxWeight",
        "getTotalWeight",
        "items",
        "slots",
        "stringLabel",
        "totalWeight",
        "array",
        "initiator",
        "renderData",
        "j",
        "Slot",
        "slotsRendered",
        "renderSlot",
        "dir",
        "onHover",
        "specialSlots",
        "UUID",
        "Notification",
        "notification",
        "header",
        "content",
        "duration",
        "visible",
        "CSSTransition",
        "timeout",
        "classNames",
        "appear",
        "leave",
        "in",
        "unmountOnExit",
        "Inventory",
        "emitClientEvent",
        "options",
        "method",
        "body",
        "fetch",
        "boxDroppable",
        "tabName",
        "tabDirection",
        "containerSearch",
        "innerHTML",
        "leftContainer",
        "containers",
        "rightContainer",
        "includes",
        "freeSlot",
        "generateFreeSlot",
        "handleDrop",
        "sendNotification",
        "handleKeyUp",
        "e",
        "keyCode",
        "fadeOut",
        "ctrlClick",
        "handleKeyDown",
        "maxSlots",
        "occupiedSlots",
        "itemIndex",
        "toString",
        "notifications",
        "shift",
        "renderContainers",
        "empty",
        "direction",
        "handleLoadingComplete",
        "handleItemLeave",
        "handleItemHover",
        "tab",
        "handleTabChange",
        "handleSwitch",
        "right",
        "quickSwitch",
        "itemData",
        "itemAction",
        "getContainerFromItem",
        "switchToDirection",
        "targetAction",
        "getOpenedContainer",
        "returnContainer",
        "leftContainerIndex",
        "currentItemIndex",
        "rightContainerIndex",
        "infoBox",
        "object",
        "info",
        "Description",
        "text",
        "getAmount",
        "Date",
        "getTime",
        "amount",
        "map",
        "elem",
        "fontWeight",
        "color",
        "opacity",
        "Title",
        "Text",
        "Image",
        "marginLeft",
        "borderRadius",
        "src",
        "UseButton",
        "Button",
        "useItem",
        "marginRight",
        "display",
        "justifyContent",
        "variant",
        "placeholder",
        "value",
        "inputValue",
        "onChange",
        "handleChange",
        "type",
        "handleNuiEvent",
        "inventory",
        "specificInventoryData",
        "bank",
        "cash",
        "Action",
        "money",
        "fadeIn",
        "console",
        "log",
        "busy",
        "needsLock",
        "checkedInventories",
        "Object",
        "entries",
        "KEYCHAIN",
        "ACCESSORIES",
        "playerInventories",
        "itemsInInventory",
        "currentInventoryIndex",
        "inventoryName",
        "getContainer",
        "combineItems",
        "copyInitator",
        "copyTarget",
        "parseInt",
        "Stackable",
        "OldCount",
        "targetInventory",
        "itemDroppedCount",
        "inventoryMaxWeight",
        "deleteItem",
        "box",
        "newInitiator",
        "newTarget",
        "createNew",
        "itemDropped",
        "toInventory",
        "copyElement",
        "filter",
        "c",
        "containerName",
        "inventories",
        "currentInventory",
        "activeElement",
        "addEventListener",
        "App",
        "Boolean",
        "location",
        "hostname",
        "match",
        "ReactDOM",
        "render",
        "document",
        "getElementById",
        "navigator",
        "serviceWorker",
        "ready",
        "then",
        "registration",
        "unregister"
    ],
    "mappings": "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",
    "file": "static/js/main.d7794bc7.chunk.js",
    "sourcesContent": [
        "import React, { Component, Fragment } from 'react';\r\nimport $ from 'jquery';\r\nimport 'jquery-ui-bundle';\r\nimport 'jquery-ui-bundle/jquery-ui.css';\r\n\r\nclass InventoryItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.element = React.createRef();\r\n        this.state = {\r\n            label: '',\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let focus = this\r\n\r\n        // $('.item').draggable({\r\n        //     revert: true,\r\n        //     revertDuration: 0,\r\n        //     scroll: false,\r\n        //     helper: \"clone\",\r\n        //     appendTo: \"body\",\r\n\r\n        //     start: function (event, ui) {\r\n        //         if (ui.helper[0].classList[0] === 'hidden') {\r\n        //             return false\r\n        //         }\r\n\r\n        //         $(this).hide()\r\n\r\n        //         focus.setState({ label: $(this).siblings()[0].textContent })\r\n\r\n        //         $(ui.helper[0].children[0]).fadeOut(200)\r\n        //         $(ui.helper[0].children[2]).fadeOut(200)\r\n        //         $(this).siblings()[0].textContent = ''\r\n\r\n        //         focus.props.startedDragging(focus.props.item)\r\n        //     },\r\n\r\n        //     stop: function (event, ui) {\r\n        //         $(this).show()\r\n        //         $(this).siblings().html(focus.state.label)\r\n\r\n        //         focus.props.stoppedDragging()\r\n        //     }\r\n        // })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let focus = this\r\n\r\n        $('.item').draggable({\r\n            revert: true,\r\n            revertDuration: 0,\r\n            scroll: false,\r\n            helper: \"clone\",\r\n            appendTo: \"body\",\r\n\r\n            start: function (event, ui) {\r\n                if (ui.helper[0].classList[0] === 'hidden') {\r\n                    return false\r\n                }\r\n                $(this).hide()\r\n                focus.setState({ label: $(this).siblings()[0].textContent })\r\n                // $(ui.helper[0].children[0]).fadeOut(200)\r\n                // $(ui.helper[0].children[2]).fadeOut(200)\r\n                $(this).siblings()[0].textContent = ''\r\n\r\n                focus.props.startedDragging(focus.props.item)\r\n\r\n                focus.setState({\r\n                    dragging: focus.props.item\r\n                })\r\n            },\r\n\r\n            stop: function (event, ui) {\r\n                $(this).show()\r\n                $(this).siblings().html(focus.state.label)\r\n\r\n                focus.props.stoppedDragging()\r\n\r\n                focus.setState({\r\n                    dragging: focus.props.item\r\n                })\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    onItemLeave = () => {\r\n        this.props.onItemLeave()\r\n    }\r\n\r\n    onItemHover = () => {\r\n        // const getOffset = (el) => {\r\n        //     const rect = el.getBoundingClientRect();\r\n        //     return {\r\n        //         left: rect.left + window.scrollX,\r\n        //         top: rect.top + window.scrollY\r\n        //     }\r\n        // }\r\n        // if (this.props.item.description) {\r\n        //     this.props.onItemHover(getOffset(this.element.current), this.props.item)\r\n        // }\r\n\r\n    }\r\n\r\n    onItemClick = () => {\r\n        const getOffset = (el) => {\r\n            const rect = el.getBoundingClientRect();\r\n            return {\r\n                left: rect.left + window.scrollX,\r\n                top: rect.top + window.scrollY\r\n            }\r\n        }\r\n\r\n        this.props.onItemHover(getOffset(this.element.current), this.props.item)\r\n    }\r\n\r\n    handleHiddenItemClick = () => {\r\n        this.setState({ loading: true })\r\n        setTimeout(() => {\r\n            this.setState({ loading: false })\r\n            this.props.onLoadingComplete(this.props.item)\r\n        }, 1500)\r\n    }\r\n\r\n    render() {\r\n        const { Logo, Name, Count, Weight, Durability } = this.props.item\r\n\r\n        return (\r\n            <Fragment>\r\n                {this.props.item.Hidden ? <div className=\"hidden\" onClick={this.handleHiddenItemClick}>{this.state.loading ? <div className=\"lds-dual-ring\"></div> : ''}</div> :\r\n                    <div ref={this.element} className=\"item\" data-props={JSON.stringify(this.props)} onMouseLeave={this.onItemLeave} onMouseEnter={this.onItemHover} onClick={this.onItemClick}>\r\n                        <div className=\"item-count\">{Count}{Name === \"money\" ? \"kr\" : \"st\"}</div>\r\n                        <div className={`item-image default ${Logo !== undefined ? Logo : Name}`}></div>\r\n                        <div className=\"item-weight\">{Math.round((Count * Weight) * 100) / 100}kg</div>\r\n                        {Durability !== undefined ? <div className=\"item-bar\" style={{ width: `${Durability}%`, left: `calc((100% - ${Durability}%) / 2)` }}>{Durability}%</div> : \"\"}\r\n                    </div>\r\n                }\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InventoryItem;",
        "import React, { Component } from 'react';\r\nimport InventoryItem from './inventoryItem';\r\nimport $ from 'jquery';\r\nimport 'jquery-ui-bundle';\r\nimport 'jquery-ui-bundle/jquery-ui.css';\r\n\r\nclass InventorySlot extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isActive: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let focus = this\r\n\r\n        $(\".inventory-slot\").droppable({\r\n            accept: \".item\",\r\n\r\n            drop: function (event, ui) {\r\n                if ($(this).children().length === 1) {\r\n                    let target = JSON.parse(this.getAttribute('data-props'))\r\n                    focus.props.onDrop(target, $(ui.draggable).data('props'))\r\n                } else if ($(this).children().length === 2) {\r\n                    focus.props.onSwitch($(ui.draggable).data('props'), $(this.children[0]).data('props'))\r\n                }\r\n            },\r\n            over: function (event, ui) {\r\n                this.scrollIntoView({ behavior: 'smooth', block: 'nearest' })\r\n            }\r\n        })\r\n\r\n        $(\".inventory-slot\").hover(function () {\r\n            const slotInformation = JSON.parse($(this)[0].getAttribute(\"data-props\"));\r\n\r\n            if (focus.props.slot === slotInformation.slot && focus.props.action === slotInformation.action) {\r\n                focus.setState({\r\n                    isActive: true\r\n                })\r\n            }\r\n        }, function () {\r\n            focus.setState({\r\n                isActive: false\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let item = this.determineItem();\r\n\r\n        return (\r\n            <div className={`inventory-slot${this.props.active(this.props.item) || this.state.isActive ? \"-active\" : \"\"}`} data-props={JSON.stringify(this.props)}>\r\n                {item}\r\n                <div className=\"inventory-slot-label\">{this.transformData().Hidden ? '' : this.getLabelLength()}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getLabelLength = () => {\r\n        String.prototype.trunc = String.prototype.trunc ||\r\n            function (n) {\r\n                return (this.length > n) ? this.substr(0, n - 1) + '...' : this;\r\n            };\r\n\r\n        if (this.transformData().Label) {\r\n            return this.transformData().Label.trunc(15)\r\n        }\r\n    }\r\n\r\n    determineItem = () => {\r\n        if (this.props.item !== undefined) {\r\n            return <InventoryItem startedDragging={() => this.props.startedDragging()} stoppedDragging={() => this.props.stoppedDragging()} onLoadingComplete={(item) => this.props.onLoadingComplete(item)} onItemLeave={this.props.onItemLeave} onItemHover={(offset, item) => this.props.onItemHover(offset, item)} action={this.props.action} item={this.props.item} />\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    transformData = () => {\r\n        if (this.props.item !== undefined) {\r\n            return this.props.item\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default InventorySlot;",
        "import React, { Component, Fragment } from 'react';\r\nimport InventorySlot from './inventorySlot';\r\n\r\nclass InventoryBox extends Component {\r\n    state = {\r\n        check: false,\r\n\r\n        active: false\r\n    }\r\n\r\n    render() {\r\n        const { slots } = this.props.data;\r\n        const slotsRendered = this.renderSlot(slots);\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"inventory-box\">\r\n                    <div className=\"inventory-box-tabs\">\r\n                        {this.renderTabs()}\r\n                    </div>\r\n\r\n                    <div className=\"inventory-box-inner\">{slotsRendered.slotsRendered}</div>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    renderTabs = () => {\r\n        let output = []\r\n\r\n        this.props.container.forEach((container, i) => {\r\n            let selected = ''\r\n\r\n            if (this.props.activeContainers === container.action) {\r\n                selected = 'inventory-box-tab-selected'\r\n            }\r\n\r\n            output.push(<div onClick={() => this.props.onChangeTab(container.action)} key={i} className={`inventory-box-tab ${selected}`}>{this.getLabelLength(container.actionLabel) + (selected ? (this.props.data.maxWeight === -1 ? \"\" : \" (\" + this.getTotalWeight() + \"/\" + this.props.data.maxWeight + \"kg)\") : \" (\" + container.items.length + \"/\" + container.slots + \")\")}</div>)\r\n        })\r\n\r\n        return output\r\n\r\n    }\r\n\r\n    getLabelLength = (stringLabel) => {\r\n        // eslint-disable-next-line\r\n        String.prototype.trunc = String.prototype.trunc ||\r\n            function (n) {\r\n                return (this.length > n) ? this.substr(0, n - 1) + '...' : this;\r\n            };\r\n\r\n        if (stringLabel) {\r\n            return stringLabel.trunc(16)\r\n        }\r\n    }\r\n\r\n    getTotalWeight = () => {\r\n        let totalWeight = 0\r\n        let array = this.props.data.items\r\n        for (let i = 0; i < array.length; i++) {\r\n            const item = array[i]\r\n\r\n            totalWeight = totalWeight + item.Weight * item.Count\r\n        }\r\n        return Math.round(totalWeight * 100) / 100\r\n    }\r\n\r\n    renderSlot(slots) {\r\n        const slotsRendered = [];\r\n        const specialSlots = [];\r\n\r\n        if (this.props.activeContainers === this.props.data.action) {\r\n            for (let i = 0; i < slots; i++) {\r\n                slotsRendered.push(<InventorySlot startedDragging={(item) => {\r\n                    this.setState({\r\n                        dragging: item\r\n                    })\r\n                }} stoppedDragging={() => {\r\n                    this.setState({\r\n                        dragging: false\r\n                    })\r\n                }} active={(item) => this.isActive(item)} onLoadingComplete={(item) => this.props.onLoadingComplete(item, this.props.activeContainers, this.props.dir)} onItemLeave={this.props.onItemLeave} onItemHover={(offset, item) => this.onHover(offset, item)} key={i} slot={i} onSwitch={(initiator, target) => this.onSwitch(initiator, target)} onDrop={(target, element) => this.onDrop(target, element)} action={this.props.data.action} item={this.renderData(i)} />)\r\n            }\r\n        }\r\n        return {\r\n            slotsRendered,\r\n            specialSlots\r\n        };\r\n    }\r\n\r\n    isActive(item) {\r\n        if (item !== undefined && this.state.active === item.UUID)\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    onHover(offset, item) {\r\n        this.setState({\r\n            active: item.UUID\r\n        });\r\n\r\n        this.props.onItemHover(offset, item);\r\n    }\r\n\r\n    onSwitch = (initiator, target) => {\r\n        if (this.state.check) {\r\n        } else {\r\n            this.props.onSwitch(initiator, target)\r\n            this.setState({ check: false })\r\n        }\r\n        this.setState({ check: true }, () => {\r\n            setTimeout(() => {\r\n                this.setState({ check: false })\r\n            }, 1)\r\n        })\r\n    }\r\n\r\n    onDrop = (target, element) => {\r\n        if (this.state.check) {\r\n        } else {\r\n            this.props.onDrop(target, element)\r\n            this.setState({ check: false })\r\n        }\r\n        this.setState({ check: true }, () => {\r\n            setTimeout(() => {\r\n                this.setState({ check: false })\r\n            }, 1)\r\n        })\r\n    }\r\n\r\n    renderData = i => {\r\n        for (let j = 0; j < this.props.data.items.length; j++) {\r\n            if (i === this.props.data.items[j].Slot) {\r\n                return this.props.data.items[j]\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default InventoryBox;",
        "import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nclass Notification extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            notification: {\r\n                header: '',\r\n                content: '',\r\n                duration: null,\r\n                visible: null\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let notification = this.state.notification\r\n        const { header, content, duration } = this.props.data\r\n\r\n        notification.header = header\r\n        notification.content = content\r\n        notification.duration = duration\r\n        notification.visible = true\r\n\r\n        this.setState({ notification }, () => {\r\n            setTimeout(() => {\r\n                notification.visible = false\r\n                this.setState({ notification })\r\n            }, duration)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { header, content, visible } = this.state.notification\r\n\r\n        if (visible === null) {\r\n            visible = false\r\n        }\r\n\r\n        return (\r\n            <CSSTransition\r\n                timeout={500}\r\n                classNames=\"inventory-notification\"\r\n                appear={true}\r\n                leave={!visible}\r\n                in={visible}\r\n                unmountOnExit\r\n            >\r\n                <div className=\"notification\">\r\n                    <div className=\"notification-header\">{header}</div>\r\n                    <div className=\"notification-content\">{content}</div>\r\n                </div>\r\n            </CSSTransition>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Notification;",
        "import React, { Component, Fragment } from 'react';\r\nimport InventoryBox from './inventoryBox';\r\nimport Notification from './notification';\r\nimport $ from 'jquery';\r\nimport 'jquery-ui-bundle';\r\nimport 'jquery-ui-bundle/jquery-ui.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Inventory extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            amount: 1664345109498,\r\n            inputValue: '',\r\n            money: {\r\n                cash: 0,\r\n                bank: 0\r\n            },\r\n            busy: false,\r\n            activeContainers: {\r\n                left: 'inventory',\r\n                right: 'ground'\r\n            },\r\n            activeElement: {},\r\n            infoBox: {\r\n                offset: {\r\n                    left: 0,\r\n                    top: 0,\r\n                },\r\n                visible: false,\r\n                info: {\r\n                    label: '',\r\n                    text: '',\r\n                    item: []\r\n                }\r\n            },\r\n            ctrlClick: false,\r\n            notifications: [],\r\n            containers: {\r\n                leftContainer: [\r\n                    {\r\n                        action: 'POCKETS_1993-06-16',\r\n                        actionLabel: 'Ryggsäck',\r\n                        slots: 24,\r\n                        maxWeight: 2,\r\n                        items: [\r\n                            {\r\n                                Name: \"mobile_phone\",\r\n                                Label: 'iPhone 8',\r\n                                Count: 1,\r\n                                Slot: 8,\r\n                                Weight: 0.2,\r\n                                UUID: \"39b9571b-23232323-429d-b9b0-23232332323\",\r\n                                Durability: 73,\r\n                                UseButton: \"STäNG AV\"\r\n                            },\r\n                            {\r\n                                Name: \"id_card\",\r\n                                Label: 'Identifikation',\r\n                                Count: 1,\r\n                                Slot: 7,\r\n                                Weight: 0.2,\r\n                                UUID: \"39b9571b-2323233323-429d-b9b0-23232332323\",\r\n                                UseButton: \"INSPEKTERA\",\r\n                                Image: \"http://i.imgur.com/Yb9qrhX.jpg\"\r\n                            },\r\n\r\n                            {\r\n                                Name: \"phone\",\r\n                                Label: 'iPhone X',\r\n                                Count: 1,\r\n                                Slot: 6,\r\n                                Weight: 0.2,\r\n                                UUID: \"39b239571b-99bc-429d-b9b0-23232332323\",\r\n                                UseButton: \"AVAKTIVERA TELEFONEN\"\r\n                            },\r\n                            //         {\r\n                            //             name: 'bankcard',\r\n                            //             label: 'Bankkort',\r\n                            //             count: 1,\r\n                            //             slot: 18,\r\n                            //             weight: 0.2,\r\n                            //             itemId: \"39b9571b-99bc-429d-b9b0-af59421ddb25\",\r\n                            //             description: [\r\n                            //                 {\r\n                            //                     title: \"\",\r\n                            //                     text: \"Du kan använda detta bankkort när du betalar vid olika platser.\"\r\n                            //                 },\r\n                            //                 {\r\n                            //                     title: \"Kortnummer:\",\r\n                            //                     text: \"1728947289437\"\r\n                            //                 },\r\n                            //                 {\r\n                            //                     title: \"Kortägare:\",\r\n                            //                     text: \"Johan Johnsson\"\r\n                            //                 },\r\n                            //             ],\r\n                            //             stackable: false,\r\n                            //             usable: true\r\n                            //         },\r\n                            //         {\r\n                            //             name: 'dyrkset',\r\n                            //             label: 'Dyrk',\r\n                            //             count: 1,\r\n                            //             slot: 6,\r\n                            //             weight: 1.75,\r\n                            //             itemId: \"232323-99bc-429d-b9b0-af59421ddb25\",\r\n                            //             description: [\r\n                            //                 {\r\n                            //                     title: \"\",\r\n                            //                     text: \"Du kan dyrka med denna.\"\r\n                            //                 }\r\n                            //             ],\r\n                            //             stackable: false,\r\n                            //             usable: true,\r\n                            //             durability: 55\r\n                            //         },\r\n                            //         { name: 'money', label: 'Kontanter', count: 20, slot: 19, weight: 0.0, itemId: \"23433535-99bc-429d-b9b0-af59421ddb25\", description: 'Du kan röka denna och bli fett hög, samtidigt som du kan skjuta två katter kan du gräva ner en halv miljon i en ryggsäck som magnus äger där i finns faktiskt väldigt många katter och hundar som han har dödat över åren.', stackable: true, usable: true },\r\n                        ]\r\n                    },\r\n                    {\r\n                        action: 'KEYCHAIN_1993-06-16',\r\n                        actionLabel: 'Nyckelknippa',\r\n                        slots: 3,\r\n                        maxWeight: 8,\r\n                        items: [\r\n                            {\r\n                                Name: \"key\",\r\n                                Label: '69 Väg 32',\r\n                                Count: 1,\r\n                                Slot: 0,\r\n                                Weight: 0.2,\r\n                                UUID: \"39b9571b-99bc-429d-b9b0-sxdsdxs\"\r\n                            },\r\n                            {\r\n                                Name: \"key\",\r\n                                Label: '75 Väg 69',\r\n                                Count: 23,\r\n                                Slot: 1,\r\n                                Weight: 0.2,\r\n                                UUID: \"39b9571b-99bc-429d-b9b0-jrtjrtjrt\"\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        action: 'ACCESSORIES_1993-06-16',\r\n                        actionLabel: 'Accessoarer',\r\n                        slots: 3,\r\n                        maxWeight: 8,\r\n                        items: [\r\n                            {\r\n                                Name: \"hat\",\r\n                                Label: 'Hatt',\r\n                                Count: 1,\r\n                                Slot: 0,\r\n                                Weight: 0.2,\r\n                                UUID: \"39b9571b-232323-429d-b9b0-sxdsdxs\"\r\n                            },\r\n                            {\r\n                                Name: \"glasses\",\r\n                                Label: 'Glasögon',\r\n                                Count: 1,\r\n                                Slot: 1,\r\n                                Weight: 0.2,\r\n                                UUID: \"39b9571b-99bc-429d-b9b0-jrtjrtjrt\"\r\n                            },\r\n                        ]\r\n                    }\r\n                ],\r\n                rightContainer: [\r\n                    {\r\n                        action: 'ground',\r\n                        actionLabel: 'Marken',\r\n                        slots: 20,\r\n                        maxWeight: -1,\r\n                        items: [\r\n                            // { name: 'phone', label: 'Telefon', count: 1, slot: 4, weight: 0.8, itemId: \"39b9571b-99bc-429d-b9b0-af59421ddb25\", },\r\n                            // { name: 'water', label: 'Ramlösa', count: 20, slot: 10, weight: 0.2, itemId: \"39b9571b-99bc-429d-b9b0-af59421ddb25\", },\r\n                            // { name: 'pistol', label: 'Colt .50', count: 5, slot: 3, weight: 0.7, itemId: \"39b9571b-99bc-429d-b9b0-af59421ddb25\", },\r\n                        ]\r\n                    },\r\n                    // {\r\n                    //     action: 'glovebox-1993',\r\n                    //     actionLabel: 'Handskfack',\r\n                    //     slots: 20,\r\n                    //     maxWeight: 20,\r\n                    //     items: [\r\n                    //         { name: 'flashlight', label: 'Ficklampa', count: 1, slot: 9, weight: 0.3, itemId: \"39b9571b-99bc-429d-b9b0-af59421ddb25\" },\r\n                    //         { name: 'stungun', label: 'X26 Taser', count: 2, slot: 5, weight: 0.5, itemId: \"39b9571b-99bc-429d-b9b0-af59421ddb25\", },\r\n                    //         { name: 'nightstick', label: 'ASP Batong', count: 5, slot: 3, weight: 0.5, itemId: \"39b9571b-99bc-429d-b9b0-af59421ddb25\", },\r\n                    //     ]\r\n                    // },\r\n                    // {\r\n                    //     action: 'person',\r\n                    //     actionLabel: 'Person',\r\n                    //     slots: 20,\r\n                    //     maxWeight: 5000,\r\n                    //     items: [\r\n                    //         { name: 'phone', label: 'Telefon', count: 1, hidden: true, slot: 4, weight: 0.8, itemId: \"39b9571b-99bc-429d-b9b0-af59421ddb25\", },\r\n                    //         { name: 'water', label: 'Ramlösa', count: 20, hidden: true, slot: 10, weight: 0.2, itemId: \"39b9571b-99bc-429d-b9b0-af59421ddb25\", },\r\n                    //         { name: 'pistol', label: 'Colt .50', count: 5, hidden: true, slot: 6, weight: 0.7, itemId: \"39b9571b-99bc-429d-b9b0-af59421ddb25\", },\r\n                    //     ]\r\n                    // }\r\n                ]\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    emitClientEvent = (event, data) => {\r\n        const options = {\r\n            method: 'POST',\r\n            body: JSON.stringify({ event, data })\r\n        };\r\n\r\n        // console.log(`Sending event to client: ${event} with data: ${JSON.stringify(data)}`)\r\n\r\n        fetch('http://nuipipe/nui_client_response', options)\r\n    }\r\n\r\n    boxDroppable = () => {\r\n        let focus = this\r\n\r\n        $(\".inventory-box-tab\").droppable({\r\n            accept: \".item\",\r\n\r\n            over: function (event, ui) {\r\n\r\n            },\r\n            drop: function (event, ui) {\r\n                // Maybe add it to the inventory\r\n\r\n                const containerSearch = event.target.innerHTML;\r\n\r\n                let tabName, tabDirection;\r\n\r\n                const leftContainer = focus.state.containers.leftContainer\r\n                const rightContainer = focus.state.containers.rightContainer\r\n\r\n                leftContainer.forEach((container) => {\r\n                    if (containerSearch.includes(container.actionLabel)) {\r\n                        tabName = container.action;\r\n                        tabDirection = \"left\";\r\n                    }\r\n                })\r\n\r\n                rightContainer.forEach((container) => {\r\n                    if (containerSearch.includes(container.actionLabel)) {\r\n                        tabName = container.action;\r\n                        tabDirection = \"right\";\r\n                    }\r\n                })\r\n\r\n                if (tabName !== null && tabDirection !== null) {\r\n                    let freeSlot = focus.generateFreeSlot(tabName)\r\n\r\n                    if (freeSlot !== false) {\r\n                        const target = {\r\n                            action: tabName,\r\n                            slot: freeSlot\r\n                        }\r\n\r\n                        focus.handleDrop(target, $(ui.draggable).data('props'))\r\n                    } else {\r\n                        focus.sendNotification({\r\n                            header: \"Inventory\",\r\n                            content: \"Föremålet får inte plats här (Rutor).\",\r\n                            duration: 4000\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        let focus = this\r\n\r\n        focus.boxDroppable()\r\n\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        window.addEventListener('keyup', this.handleKeyUp)\r\n        window.addEventListener('message', this.handleNuiEvent)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let focus = this\r\n\r\n        focus.boxDroppable()\r\n    }\r\n\r\n    handleKeyUp = (e) => {\r\n        if (e.keyCode === 27 || e.keyCode === 9) {\r\n            this.emitClientEvent(\"x-inventory:closeInventory\")\r\n\r\n            $('.overlay').fadeOut()\r\n        } else if (e.keyCode === 16) {\r\n            this.setState({\r\n                ctrlClick: false\r\n            })\r\n        }\r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n        if (e.keyCode === 16) {\r\n            this.setState({\r\n                ctrlClick: true\r\n            })\r\n        }\r\n    }\r\n\r\n    generateFreeSlot = (tabName) => {\r\n        let focus = this\r\n\r\n        const leftContainer = focus.state.containers.leftContainer\r\n        const rightContainer = focus.state.containers.rightContainer\r\n\r\n        let occupiedSlots = [];\r\n\r\n        let maxSlots;\r\n\r\n        leftContainer.forEach((container) => {\r\n            if (container.action === tabName) {\r\n                maxSlots = container.slots;\r\n\r\n                for (let itemIndex = 0; itemIndex < container.items.length; itemIndex++) {\r\n                    const item = container.items[itemIndex];\r\n\r\n                    if (item) {\r\n                        if (item.Slot !== undefined) {\r\n                            occupiedSlots[item.Slot.toString()] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        rightContainer.forEach((container) => {\r\n            if (container.action === tabName) {\r\n                maxSlots = container.slots;\r\n\r\n                for (let itemIndex = 0; itemIndex < container.items.length; itemIndex++) {\r\n                    const item = container.items[itemIndex];\r\n\r\n                    if (item) {\r\n                        if (item.Slot !== undefined) {\r\n                            occupiedSlots[item.Slot.toString()] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n\r\n        for (let itemIndex = 0; itemIndex < maxSlots; itemIndex++) {\r\n            if (!occupiedSlots[itemIndex.toString()]) {\r\n                return itemIndex;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    sendNotification = (data) => {\r\n        let notifications = this.state.notifications\r\n\r\n        if (notifications.length > 10) {\r\n            notifications.shift()\r\n        }\r\n\r\n        notifications.push(data)\r\n\r\n        this.setState({ notifications })\r\n    }\r\n\r\n    renderContainers = () => {\r\n        let output = []\r\n        let leftContainer = this.state.containers.leftContainer\r\n        let rightContainer = this.state.containers.rightContainer\r\n        let empty = 0\r\n\r\n        leftContainer.forEach((container) => {\r\n            if (this.state.activeContainers.left === container.action) {\r\n                output.push(<InventoryBox onLoadingComplete={(item, container, direction) => this.handleLoadingComplete(item, container, direction)} onItemLeave={this.handleItemLeave} onItemHover={(offset, item) => this.handleItemHover(offset, item)} onChangeTab={(tab) => { this.handleTabChange(tab, 'left') }} dir=\"left\" activeContainers={this.state.activeContainers.left} container={this.state.containers.leftContainer} onSwitch={(initiator, target) => this.handleSwitch(initiator, target)} onDrop={(target, element) => this.handleDrop(target, element)} data={container} key={0} />)\r\n                empty++\r\n            }\r\n        })\r\n\r\n        rightContainer.forEach((container) => {\r\n            if (this.state.activeContainers.right === container.action) {\r\n                output.push(<InventoryBox onLoadingComplete={(item, container, direction) => this.handleLoadingComplete(item, container, direction)} onItemLeave={this.handleItemLeave} onItemHover={(offset, item) => this.handleItemHover(offset, item)} onChangeTab={(tab) => { this.handleTabChange(tab, 'right') }} dir=\"right\" activeContainers={this.state.activeContainers.right} container={this.state.containers.rightContainer} onSwitch={(initiator, target) => this.handleSwitch(initiator, target)} onDrop={(target, element) => this.handleDrop(target, element)} data={container} key={1} />)\r\n                empty++\r\n            }\r\n        })\r\n\r\n        if (empty !== 2) {\r\n            this.setState({\r\n                activeContainers: {\r\n                    left: leftContainer[0].action,\r\n                    right: rightContainer[0].action\r\n                }\r\n            })\r\n        }\r\n\r\n        return output\r\n\r\n    }\r\n\r\n    handleLoadingComplete = (item, container, direction) => {\r\n        let leftContainer = this.state.containers.leftContainer\r\n        let rightContainer = this.state.containers.rightContainer\r\n        let containers = this.state.containers\r\n\r\n        if (direction === 'left') {\r\n            for (let i = 0; i < leftContainer.length; i++) {\r\n                if (leftContainer[i].action === container) {\r\n                    for (let j = 0; j < leftContainer[i].items.length; j++) {\r\n                        if (leftContainer[i].items[j].Slot === item.Slot) {\r\n                            leftContainer[i].items[j].Hidden = false\r\n                            containers.leftContainer = leftContainer\r\n                            this.setState({ containers })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else if (direction === 'right') {\r\n            for (let i = 0; i < rightContainer.length; i++) {\r\n                if (rightContainer[i].action === container) {\r\n                    for (let j = 0; j < rightContainer[i].items.length; j++) {\r\n                        if (rightContainer[i].items[j].Slot === item.Slot) {\r\n                            rightContainer[i].items[j].Hidden = false\r\n                            containers.rightContainer = rightContainer\r\n                            this.setState({ containers })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleItemLeave = () => {\r\n        // let infoBox = this.state.infoBox\r\n        // infoBox.visible = false\r\n        // this.setState({ infoBox })\r\n    }\r\n\r\n    quickSwitch = (itemData) => {\r\n        let itemAction = this.getContainerFromItem(itemData);\r\n\r\n        let switchToDirection = this.state.activeContainers.left === itemAction.action ? \"RIGHT\" : \"LEFT\";\r\n\r\n        let targetAction = this.getOpenedContainer(switchToDirection);\r\n\r\n        let freeSlot = this.generateFreeSlot(targetAction.action);\r\n\r\n        if (freeSlot === false) {\r\n            return;\r\n        }\r\n\r\n        this.handleDrop({\r\n            action: targetAction.action,\r\n            slot: freeSlot\r\n        }, {\r\n            action: itemAction.action,\r\n            item: itemData\r\n        });\r\n    }\r\n\r\n    getContainerFromItem = (item) => {\r\n        let returnContainer;\r\n\r\n        let leftContainer = this.state.containers.leftContainer\r\n        let rightContainer = this.state.containers.rightContainer\r\n\r\n        for (let leftContainerIndex = 0; leftContainerIndex < leftContainer.length; leftContainerIndex++) {\r\n            const container = leftContainer[leftContainerIndex];\r\n\r\n            for (let currentItemIndex = 0; currentItemIndex < container.items.length; currentItemIndex++) {\r\n                const _item = container.items[currentItemIndex];\r\n\r\n                if (_item.UUID === item.UUID) {\r\n                    returnContainer = container;\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let rightContainerIndex = 0; rightContainerIndex < rightContainer.length; rightContainerIndex++) {\r\n            const container = rightContainer[rightContainerIndex];\r\n\r\n            for (let currentItemIndex = 0; currentItemIndex < container.items.length; currentItemIndex++) {\r\n                const _item = container.items[currentItemIndex];\r\n\r\n                if (_item.UUID === item.UUID) {\r\n                    returnContainer = container;\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return returnContainer;\r\n    }\r\n\r\n    getOpenedContainer = (direction) => {\r\n        let returnContainer;\r\n\r\n        let leftContainer = this.state.containers.leftContainer\r\n        let rightContainer = this.state.containers.rightContainer\r\n\r\n        if (direction === \"LEFT\") {\r\n            for (let leftContainerIndex = 0; leftContainerIndex < leftContainer.length; leftContainerIndex++) {\r\n                const container = leftContainer[leftContainerIndex];\r\n\r\n                if (container.action === this.state.activeContainers.left) {\r\n                    returnContainer = container;\r\n\r\n                    break;\r\n                }\r\n            }\r\n        } else if (direction === \"RIGHT\") {\r\n            for (let rightContainerIndex = 0; rightContainerIndex < rightContainer.length; rightContainerIndex++) {\r\n                const container = rightContainer[rightContainerIndex];\r\n\r\n                if (container.action === this.state.activeContainers.right) {\r\n                    returnContainer = container;\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return returnContainer;\r\n    }\r\n\r\n    handleItemHover = (offset, item) => {\r\n        if (this.state.ctrlClick) {\r\n            return this.quickSwitch(item);\r\n        }\r\n\r\n        let infoBox = this.state.infoBox\r\n\r\n        infoBox.object = undefined\r\n        infoBox.info = []\r\n\r\n        infoBox.offset.left = 0\r\n        infoBox.offset.top = 0\r\n        infoBox.info.item = item\r\n\r\n\r\n        if (typeof (item.Description) === \"object\") {\r\n            infoBox.object = item.Description\r\n        } else {\r\n            infoBox.info.text = item.Description\r\n        }\r\n\r\n        infoBox.info.label = item.Label\r\n\r\n        infoBox.visible = true\r\n\r\n        this.setState({ infoBox })\r\n    }\r\n\r\n    handleTabChange = (tab, dir) => {\r\n        let containers = this.state.activeContainers\r\n\r\n        containers[dir] = tab\r\n\r\n        this.setState({ activeContainers: containers })\r\n    }\r\n\r\n    getAmount = () => {\r\n        const amount = new Date()\r\n\r\n        if (amount.getTime() < this.state.amount) {\r\n            return (\r\n                <Fragment>\r\n                    <CSSTransition\r\n                        timeout={500}\r\n                        classNames=\"inventory-info-box-animation\"\r\n                        appear={false}\r\n                        leave={!this.state.infoBox.visible}\r\n                        in={this.state.infoBox.visible}\r\n                    >\r\n                        <div style={{ left: this.state.infoBox.offset.left, top: this.state.infoBox.offset.top }} className=\"inventory-info-box\">\r\n                            <div className=\"inventory-info-box-item-label\">{`${this.state.infoBox.info.label}`}</div>\r\n\r\n                            {/* {this.state.infoBox.info.item ? <div className={`inventory-info-box-item-image default ${this.state.infoBox.info.item.Name}`}></div> : \"\"} */}\r\n\r\n                            {this.state.infoBox.object === undefined ? <div className=\"inventory-info-box-item-text\">{this.state.infoBox.info.text !== undefined ? this.state.infoBox.info.text : \"Detta föremål har ingen beskrivning.\"}</div> : \"\"}\r\n                            {this.state.infoBox.object !== undefined ? this.state.infoBox.object.map((elem, i) => <div className=\"inventory-info-box-item-text\"><span style={{ fontWeight: \"bold\", color: \"white\", opacity: \"80%\" }}>{elem.Title}</span> {elem.Text}</div>) : \"\"}\r\n\r\n                            {this.state.infoBox.info.item.Image !== undefined ? <img style={{ marginLeft: \"29.7%\", borderRadius: \"5%\" }} width=\"40%\" src={`${this.state.infoBox.info.item.Image}`}></img> : \"\"}\r\n\r\n                            {this.state.infoBox.visible && this.state.infoBox.info.item.UseButton ? <Button onClick={() => {\r\n                                this.useItem()\r\n                            }} style={{ marginRight: \"auto\", marginLeft: \"auto\", display: 'flex', justifyContent: 'center' }} variant=\"contained\" color=\"default\">{this.state.infoBox.info.item.UseButton}</Button> : \"\"}\r\n                        </div>\r\n\r\n                        {/* <button onClick={this.useItem} className=\"btn use\" id=\"btn-use\">{this.state.infoBox.info.item.UseButton ? this.state.infoBox.info.item.UseButton : \"ANVÄND\"}</button> */}\r\n                    </CSSTransition>\r\n                    <div>\r\n                        <div className=\"inventory-box-overlay\">\r\n                            {this.renderContainers()}\r\n\r\n                            <logo className=\"inventory-box-logo\"></logo>\r\n                        </div>\r\n                        <div className=\"inventory-box-buttons\">\r\n                            {/* <div className=\"inventory-money\" id=\"inventory-money-bank\">\r\n                                <div className=\"inventory-money-label\">Kontanter</div>\r\n                                <div className=\"inventory-money-money\">{this.state.money.cash} SEK</div>\r\n                            </div> */}\r\n                            <input className=\"button-input\" placeholder=\"ANTAL\" value={this.state.inputValue} onChange={this.handleChange} type=\"number\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"inventory-notification-container\">\r\n                        {this.state.notifications.map((elem, i) => <Notification key={i} data={elem} />)}\r\n                    </div>\r\n                </Fragment >\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.getAmount()\r\n        );\r\n    }\r\n\r\n    handleNuiEvent = (event) => {\r\n        const { inventory, action, specificInventoryData, bank, cash } = event.data\r\n\r\n        switch (event.data.Action) {\r\n            case 'SEND_NOTIFICATION':\r\n                this.sendNotification(event.data.data)\r\n                break;\r\n            case 'UPDATE_INVENTORY':\r\n                this.setState({ containers: inventory })\r\n\r\n                break;\r\n            case 'UPDATE_SPECIFIC_INVENTORY':\r\n                for (let i = 0; i < this.state.containers.leftContainer.length; i++) {\r\n                    let box = this.state.containers\r\n\r\n                    if (box.leftContainer[i].action === action) {\r\n                        let inventory = this.state.containers\r\n                        inventory.leftContainer[i] = specificInventoryData\r\n\r\n                        this.setState({\r\n                            containers: inventory\r\n                        })\r\n\r\n                        return\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < this.state.containers.rightContainer.length; i++) {\r\n                    let box = this.state.containers\r\n\r\n                    if (box.rightContainer[i].action === action) {\r\n                        let inventory = this.state.containers\r\n                        inventory.rightContainer[i] = specificInventoryData\r\n\r\n                        this.setState({\r\n                            containers: inventory\r\n                        })\r\n\r\n                        return\r\n                    }\r\n                }\r\n                break;\r\n            case 'UPDATE_MONEY':\r\n                let money = this.state.money\r\n\r\n                money.cash = cash\r\n                money.bank = bank\r\n\r\n                this.setState({ money })\r\n                break;\r\n            case 'OPEN_INVENTORY':\r\n                $('.overlay').fadeIn()\r\n                break;\r\n            default:\r\n                console.log(`There isn't such an action as ${event}, please make one or make sure you have spelt it right`)\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ inputValue: event.target.value });\r\n    }\r\n\r\n\r\n    handleSwitch = (initiator, target) => {\r\n        if (this.state.busy) return;\r\n\r\n        const lockItems = {\r\n            KEYCHAIN: [\r\n                \"key\"\r\n            ],\r\n            ACCESSORIES: [\r\n                \"bag\",\r\n                \"mask\",\r\n                \"hat\",\r\n                \"helmet\",\r\n                \"earaccessories\",\r\n                \"glasses\"\r\n            ]\r\n        };\r\n\r\n\r\n        if (target.item.UUID !== initiator.item.UUID) {\r\n            let needsLock = true;\r\n\r\n            let checkedInventories = 0;\r\n\r\n            for (const [key, value] of Object.entries(lockItems)) {\r\n                if (initiator.action.includes(key)) {\r\n                    checkedInventories++;\r\n\r\n                    if (value.includes(target.item.Name)) {\r\n                        needsLock = false;\r\n                    }\r\n                } else if (target.action.includes(key)) {\r\n                    checkedInventories++;\r\n\r\n                    if (value.includes(initiator.item.Name)) {\r\n                        needsLock = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (needsLock && checkedInventories > 0) {\r\n                return this.sendNotification({\r\n                    header: \"Varning\",\r\n                    content: \"Du får ej lägga in det här.\",\r\n                    duration: 4000\r\n                });\r\n            }\r\n\r\n            const playerInventories = [\r\n                \"POCKETS\",\r\n                \"KEYCHAIN\",\r\n                \"ACCESSORIES\"\r\n            ]\r\n\r\n            if ((initiator.item.Name === \"bag\" || target.item.Name === \"bag\") && initiator.action !== target.action) {\r\n                let itemsInInventory = 0;\r\n\r\n                for (let currentInventoryIndex = 0; currentInventoryIndex < playerInventories.length; currentInventoryIndex++) {\r\n                    const inventoryName = playerInventories[currentInventoryIndex];\r\n\r\n                    let checkInventory = this.getContainer(inventoryName);\r\n\r\n                    const items = checkInventory.items;\r\n\r\n                    for (let currentItemIndex = 0; currentItemIndex < items.length; currentItemIndex++) {\r\n                        const item = items[currentItemIndex];\r\n\r\n                        if (item.Name === \"bag\")\r\n                            itemsInInventory++;\r\n                    }\r\n                }\r\n\r\n                if (itemsInInventory > 0)\r\n                    return this.sendNotification({\r\n                        header: \"Inventory\",\r\n                        content: \"Föremålet kan inte läggas in här, du har redan ett av detta.\",\r\n                        duration: 4000\r\n                    });\r\n            };\r\n\r\n            this.setState({\r\n                busy: true\r\n            })\r\n\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    busy: false\r\n                })\r\n            }, 150)\r\n\r\n            let combineItems = false;\r\n\r\n            let copyInitator = JSON.parse(JSON.stringify(initiator))\r\n            let copyTarget = JSON.parse(JSON.stringify(target))\r\n\r\n            let inputValue = parseInt(this.state.inputValue) ? parseInt(this.state.inputValue) : false\r\n\r\n            if (copyInitator.item.Stackable) {\r\n                if (copyInitator.item.Name === copyTarget.item.Name) {\r\n                    combineItems = true;\r\n                }\r\n            }\r\n\r\n            if (combineItems) {\r\n                if (inputValue) {\r\n                    if (inputValue > copyInitator.item.Count) {\r\n                        inputValue = copyInitator.item.Count;\r\n                    }\r\n\r\n                    copyInitator.item.OldCount = parseInt(copyInitator.item.Count);\r\n                    copyInitator.item.Count = parseInt(inputValue);\r\n                }\r\n\r\n                if (target.action !== initiator.action) {\r\n                    let targetInventory = this.getContainer(target.action);\r\n                    let itemDroppedCount = parseInt(copyInitator.item.Count);\r\n\r\n                    let inventoryMaxWeight = targetInventory.maxWeight === -1 ? 9999999 : targetInventory.maxWeight;\r\n                    let itemWeight = copyTarget.item.Weight;\r\n\r\n                    if (itemWeight * itemDroppedCount + this.getTotalWeight(target.action) > inventoryMaxWeight) {\r\n                        return this.sendNotification({\r\n                            header: \"Inventory\",\r\n                            content: \"Föremålet får inte plats här (Vikt) (Stackable).\",\r\n                            duration: 4000\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.deleteItem(copyInitator)\r\n            this.deleteItem(copyTarget)\r\n\r\n            for (let i = 0; i < this.state.containers.leftContainer.length; i++) {\r\n                let box = this.state.containers;\r\n\r\n                if (box.leftContainer[i].action === copyInitator.action) {\r\n                    if (!combineItems) {\r\n                        copyTarget.item.Slot = initiator.item.Slot;\r\n\r\n                        box.leftContainer[i].items.push(copyTarget.item)\r\n                    }\r\n                }\r\n\r\n                if (box.leftContainer[i].action === copyTarget.action) {\r\n                    if (combineItems) {\r\n                        // (copyTarget.item.Count) += parseInt(initiator.item.Count);\r\n\r\n                        box.leftContainer[i].items.push(copyTarget.item)\r\n                    } else {\r\n                        copyInitator.item.Slot = target.item.Slot;\r\n\r\n                        box.leftContainer[i].items.push(copyInitator.item)\r\n                    }\r\n                }\r\n\r\n                this.setState({ containers: box })\r\n            }\r\n\r\n\r\n            for (let i = 0; i < this.state.containers.rightContainer.length; i++) {\r\n                let box = this.state.containers\r\n\r\n                if (box.rightContainer[i].action === copyInitator.action) {\r\n                    if (!combineItems) {\r\n                        copyTarget.item.Slot = initiator.item.Slot;\r\n\r\n                        box.rightContainer[i].items.push(copyTarget.item)\r\n                    }\r\n                }\r\n\r\n                if (box.rightContainer[i].action === copyTarget.action) {\r\n                    if (combineItems) {\r\n                        // (copyTarget.item.Count) += parseInt(initiator.item.Count);\r\n\r\n                        box.rightContainer[i].items.push(copyTarget.item)\r\n                    } else {\r\n                        copyInitator.item.Slot = target.item.Slot;\r\n\r\n                        box.rightContainer[i].items.push(copyInitator.item)\r\n                    }\r\n                }\r\n\r\n                this.setState({ containers: box })\r\n            }\r\n\r\n            const newInitiator = {\r\n                target: {\r\n                    action: copyTarget[\"action\"],\r\n                    slot: copyInitator[\"item\"][\"Slot\"]\r\n                },\r\n                element: {\r\n                    action: copyInitator[\"action\"],\r\n                    item: copyInitator[\"item\"]\r\n                }\r\n            }\r\n            const newTarget = {\r\n                target: {\r\n                    action: copyInitator[\"action\"],\r\n                    slot: copyTarget[\"item\"][\"Slot\"]\r\n                },\r\n                element: {\r\n                    action: copyTarget[\"action\"],\r\n                    item: copyTarget[\"item\"]\r\n                }\r\n            }\r\n\r\n            if (combineItems) {\r\n                // console.log(\"delete \", newTarget);\r\n                // console.log(\"update \", newInitiator);\r\n\r\n                this.emitClientEvent(\"x-inventory:combineItems\", {\r\n                    target: newTarget,\r\n                    initiator: newInitiator\r\n                });\r\n            } else {\r\n                this.emitClientEvent(\"x-inventory:dropItem\", {\r\n                    target: newInitiator.target,\r\n                    element: newInitiator.element\r\n                })\r\n\r\n                this.emitClientEvent(\"x-inventory:dropItem\", {\r\n                    target: newTarget.target,\r\n                    element: newTarget.element\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleDrop = (target, element) => {\r\n        if (this.state.busy) return;\r\n\r\n        const playerInventories = [\r\n            \"POCKETS\",\r\n            \"KEYCHAIN\"\r\n        ]\r\n\r\n        this.setState({\r\n            busy: true\r\n        })\r\n\r\n        let createNew = false;\r\n\r\n        const inputValue = parseInt(this.state.inputValue) ? parseInt(this.state.inputValue) : false\r\n\r\n        if (inputValue) {\r\n            if (inputValue < element.item.Count) {\r\n                createNew = element.item.Count;\r\n\r\n                element.item.Count = parseInt(inputValue);\r\n            }\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.setState({\r\n                busy: false\r\n            })\r\n        }, 150)\r\n\r\n        if (target[\"action\"] !== element[\"action\"]) {\r\n            let targetInventory = this.getContainer(target[\"action\"]);\r\n            let itemDropped = element[\"item\"];\r\n\r\n            const lockItems = {\r\n                KEYCHAIN: [\r\n                    \"key\"\r\n                ],\r\n                ACCESSORIES: [\r\n                    \"bag\",\r\n                    \"mask\",\r\n                    \"hat\",\r\n                    \"helmet\",\r\n                    \"earaccessories\",\r\n                    \"glasses\"\r\n                ]\r\n            };\r\n\r\n            let needsLock = true;\r\n            let checkedInventories = 0;\r\n\r\n            for (const [key, value] of Object.entries(lockItems)) {\r\n                if (element.action.includes(key)) {\r\n                    checkedInventories++;\r\n\r\n                    needsLock = false;\r\n                } else if (target.action.includes(key)) {\r\n                    checkedInventories++;\r\n\r\n                    if (value.includes(itemDropped.Name)) {\r\n                        needsLock = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (needsLock && checkedInventories > 0) {\r\n                return this.sendNotification({\r\n                    header: \"Varning\",\r\n                    content: \"Du får ej lägga in det här.\",\r\n                    duration: 4000\r\n                });\r\n            }\r\n\r\n            if (itemDropped.Name === \"bag\") {\r\n                let itemsInInventory = 0;\r\n\r\n                let toInventory = false;\r\n\r\n                for (let currentInventoryIndex = 0; currentInventoryIndex < playerInventories.length; currentInventoryIndex++) {\r\n                    const inventoryName = playerInventories[currentInventoryIndex];\r\n\r\n                    if (target.action.includes(inventoryName))\r\n                        toInventory = true;\r\n                }\r\n\r\n                if (toInventory) {\r\n                    for (let currentInventoryIndex = 0; currentInventoryIndex < playerInventories.length; currentInventoryIndex++) {\r\n                        const inventoryName = playerInventories[currentInventoryIndex];\r\n\r\n                        let checkInventory = this.getContainer(inventoryName);\r\n\r\n                        const items = checkInventory.items;\r\n\r\n                        for (let currentItemIndex = 0; currentItemIndex < items.length; currentItemIndex++) {\r\n                            const item = items[currentItemIndex];\r\n\r\n                            if (item.Name === itemDropped.Name)\r\n                                itemsInInventory++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (itemsInInventory > 0) {\r\n                    return this.sendNotification({\r\n                        header: \"Inventory\",\r\n                        content: \"Föremålet kan inte läggas in här, du har redan ett av detta.\",\r\n                        duration: 4000\r\n                    });\r\n                }\r\n            };\r\n\r\n            if (target.action.includes(\"KEYCHAIN\")) {\r\n                if (itemDropped.Name !== \"key\")\r\n                    return this.sendNotification({\r\n                        header: \"Nyckelknippa\",\r\n                        content: \"Bara nycklar får läggas här.\",\r\n                        duration: 4000\r\n                    });\r\n            }\r\n\r\n            let inventoryMaxWeight = targetInventory[\"maxWeight\"] === -1 ? 9999999 : targetInventory[\"maxWeight\"];\r\n            let itemWeight = itemDropped.Weight;\r\n\r\n            if (itemWeight * itemDropped.Count + this.getTotalWeight(target[\"action\"]) > inventoryMaxWeight) {\r\n                return this.sendNotification({\r\n                    header: \"Inventory\",\r\n                    content: \"Föremålet får inte plats här (Vikt).\",\r\n                    duration: 4000\r\n                });\r\n            }\r\n        }\r\n\r\n        this.emitClientEvent(\"x-inventory:dropItem\", {\r\n            target,\r\n            element,\r\n            createNew\r\n        })\r\n\r\n        let copyElement = JSON.parse(JSON.stringify(element))\r\n\r\n        for (let i = 0; i < this.state.containers.leftContainer.length; i++) {\r\n            if (this.state.containers.leftContainer[i].action === target.action) {\r\n                copyElement.item.Slot = target.slot\r\n                let containers = this.state.containers\r\n                containers.leftContainer[i].items.push(copyElement.item)\r\n                this.setState({ containers })\r\n                this.deleteItem(element)\r\n                return;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.state.containers.rightContainer.length; i++) {\r\n            if (this.state.containers.rightContainer[i].action === target.action) {\r\n                copyElement.item.Slot = target.slot\r\n                let containers = this.state.containers\r\n                containers.rightContainer[i].items.push(copyElement.item)\r\n                this.setState({ containers })\r\n                this.deleteItem(element)\r\n                return;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    deleteItem = (element) => {\r\n        let inventory = this.state.containers\r\n\r\n        for (let i = 0; i < this.state.containers.leftContainer.length; i++) {\r\n            if (this.state.containers.leftContainer[i].action === element.action) {\r\n                let filter = this.state.containers.leftContainer[i].items.filter(c => c.Slot !== element.item.Slot)\r\n                inventory.leftContainer[i].items = filter\r\n                this.setState({ containers: inventory })\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.state.containers.rightContainer.length; i++) {\r\n            if (this.state.containers.rightContainer[i].action === element.action) {\r\n                let filter = this.state.containers.rightContainer[i].items.filter(c => c.Slot !== element.item.Slot)\r\n                inventory.rightContainer[i].items = filter\r\n                this.setState({ containers: inventory })\r\n            }\r\n        }\r\n    }\r\n\r\n    useItem = () => {\r\n        let useItem = this.state.infoBox.info.item\r\n\r\n        if (useItem !== undefined) {\r\n            let focus = this\r\n\r\n            focus.emitClientEvent(\"x-inventory:closeInventory\")\r\n            focus.emitClientEvent(\"x-inventory:useItem\", useItem)\r\n\r\n            $('.overlay').fadeOut()\r\n\r\n            let infoBox = this.state.infoBox\r\n\r\n            infoBox.visible = false\r\n\r\n            this.setState({\r\n                infoBox\r\n            })\r\n        }\r\n    }\r\n\r\n    getContainer = (containerName) => {\r\n        let inventories = this.state.containers\r\n\r\n        for (let currentInventoryIndex = 0; currentInventoryIndex < inventories.leftContainer.length; currentInventoryIndex++) {\r\n            let currentInventory = inventories.leftContainer[currentInventoryIndex];\r\n\r\n            if (currentInventory.action.includes(containerName)) {\r\n                return currentInventory;\r\n            }\r\n        }\r\n\r\n        for (let currentInventoryIndex = 0; currentInventoryIndex < inventories.rightContainer.length; currentInventoryIndex++) {\r\n            let currentInventory = inventories.rightContainer[currentInventoryIndex];\r\n\r\n            if (currentInventory.action.includes(containerName)) {\r\n                return currentInventory;\r\n            }\r\n        }\r\n    }\r\n\r\n    getTotalWeight = (containerName) => {\r\n        let inventories = this.state.containers;\r\n\r\n        let inventory;\r\n\r\n        for (let currentInventoryIndex = 0; currentInventoryIndex < inventories.leftContainer.length; currentInventoryIndex++) {\r\n            let currentInventory = inventories.leftContainer[currentInventoryIndex];\r\n\r\n            if (currentInventory[\"action\"] === containerName) {\r\n                inventory = currentInventory;\r\n            }\r\n        }\r\n\r\n        for (let currentInventoryIndex = 0; currentInventoryIndex < inventories.rightContainer.length; currentInventoryIndex++) {\r\n            let currentInventory = inventories.rightContainer[currentInventoryIndex];\r\n\r\n            if (currentInventory[\"action\"] === containerName) {\r\n                inventory = currentInventory;\r\n            }\r\n        }\r\n\r\n        let totalWeight = 0;\r\n\r\n        let items = inventory.items;\r\n\r\n        for (let i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n\r\n            totalWeight = totalWeight + item.Weight * item.Count;\r\n        }\r\n\r\n        return Math.round(totalWeight * 100) / 100;\r\n    }\r\n}\r\n\r\nexport default Inventory;",
        "import React from 'react';\nimport Inventory from './components/inventory'\n\nfunction App() {\n  return (\n    <div className=\"overlay\">\n      <div className=\"overlay-inner\">\n        <Inventory />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",
        "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
        "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './items.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"
    ],
    "sourceRoot": ""
}
